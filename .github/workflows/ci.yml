name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    env:
      WORKLOAD_IDENTITY_PROVIDER: projects/939407899550/locations/global/workloadIdentityPools/github-pool/providers/github-provider
      SERVICE_ACCOUNT: github-actions@av-8675309.iam.gserviceaccount.com
    
    strategy:
      matrix:
        python-version: ["3.12", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.python-version }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Run unit tests with coverage (Python 3.12)
      if: matrix.python-version == '3.12'
      run: |
        python -m pytest test_vertex_gpu_compatibility.py --cov=vertex_gpu_service --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: .
    
    - name: Run Veo diagnostic tests (Python 3.11 only)
      if: matrix.python-version == '3.11'
      run: |
        python scripts/veo_diag.py
      env:
        PYTHONPATH: .
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
        VERTEX_BUCKET_NAME: av-app-artifacts
    
    - name: Verify Veo initialization (Python 3.11 only)
      if: matrix.python-version == '3.11'
      run: |
        python -c "import vertexai
        from vertexai.preview.generative_models import GenerativeModel
        import os
        
        # Initialize Vertex AI
        project_id = os.environ.get('GOOGLE_CLOUD_PROJECT')
        print(f'Initializing Vertex AI with project {project_id}')
        vertexai.init(project=project_id, location='us-central1')
        
        # Verify model can be initialized
        model = GenerativeModel('veo-3.0-generate-preview')
        print('Veo model initialized successfully')"
      env:
        PYTHONPATH: .
        GOOGLE_CLOUD_PROJECT: ${{ env.GOOGLE_CLOUD_PROJECT }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run Black formatter check
      run: black --check --diff .
    
    - name: Run isort import sorting check
      run: isort --check-only --diff .
    
    - name: Run flake8 linter
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security linter
      run: bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety dependency check
      run: safety check --json --output safety-report.json || true

  integration-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, lint]
    
    permissions:
      contents: read
      id-token: write
    
    env:
      WORKLOAD_IDENTITY_PROVIDER: projects/939407899550/locations/global/workloadIdentityPools/github-pool/providers/github-provider
      SERVICE_ACCOUNT: github-actions@av-8675309.iam.gserviceaccount.com
      GOOGLE_CLOUD_PROJECT: av-8675309
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Run integration tests
      run: |
        python -m pytest test_vertex_gpu_compatibility.py -v
      env:
        GOOGLE_CLOUD_PROJECT: ${{ env.GOOGLE_CLOUD_PROJECT }}
        RUN_INTEGRATION_TESTS: 1
        PYTHONPATH: . 